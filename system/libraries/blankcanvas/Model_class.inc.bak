<?php
/** {@link http://jeromedane.com Blank Canvas CMS}
 *
 * This file is part of the {@link http://jeromedane.com Blank Canvas CMS}.
 *
 * {@link http://jeromedane.com Blank Canvas CMS} is free software:
 * you can redistribute it and/or modify it under the terms of the
 * {@link http://www.gnu.org/licenses/gpl.html GNU General Public License}
 * as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Jerome Dane <http://jeromedane.com>
 * @copyright Copyright (c) 2011, Jerome Dane
 * @license http://www.gnu.org/licenses/gpl.html GNU General Public License
 * @package BlankCanvas
 */

namespace BlankCanvas;

require_once 'system/libraries/phpdatamapper/Base.php';

/**
 * EntityModel
 *
 * @author 	Jerome Dane
 *
 */
class Model extends \phpDataMapper_Entity {
	
	protected static $_globalAdapter;
	protected static $_innerModel;
	protected static $_mapper;
	protected static $_className;
	protected static $_plural;
	protected static $_tableName;
	protected static $_fields;
	
	public static function connect($server, $database, $user, $password) {
		require_once 'system/libraries/phpdatamapper/Adapter/Mysql.php';
		self::$_globalAdapter = new \phpDataMapper_Adapter_Mysql($server, $database, $user, $password);
	}
	
	public static function create() {
		return self::_getMapper()->get();
	}
	
	public static function getById($id) {
		return self::_getMapper()->get($id);
	}
	
	public static function query($input = null) {
		return self::_getMapper()->query($input);
	}
	
	public static function select($fields = '*') {
		if (is_int($fields)) {
			return self::_getMapper()->get($fields);
		}
		return self::_getMapper()->select($fields)->from(self::_getTableName());
	}
	
	public static function updateDatabase() {
		self::_getMapper()->migrate();
	}
	
	protected static function &_getMapper() {
		if (is_null(self::$_mapper)) {
			
			$fullClassName = get_called_class();
			
			preg_match('/[^\\\\]+$/', $fullClassName, $matches);
			$className = $matches[0];
			
			// @todo detect plugin context and generate context name
			$context = "system";
			
			// @todo add table prefixing
			$tableName = $context . '_' . (isset(self::$_plural) ? self::$_plural : $className . 's');
			$tableName = strtolower($tableName);
			
			$engine = isset(self::$_engine) ? self::$_engine : null;
			
			$inst = new $fullClassName();
			self::$_mapper = new Mapper(self::$_globalAdapter, null, $fullClassName, $tableName, $inst->getFields(), $engine);
			
			$inst = null;
			
		}
		return self::$_mapper;
	}
	
	protected static function _getTableName() {
		$fullClassName = get_called_class();
		
		preg_match('/[^\\\\]+$/', $fullClassName, $matches);
		$className = $matches[0];
		
		// @todo detect plugin context and generate context name
		$context = "system";
		
		// @todo add table prefixing
		$tableName = $context . '_' . (isset(self::$_plural) ? self::$_plural : $className . 's');
		return strtolower($tableName);
	}
	
	/**
	 * Import from an array
	 *
	 * Allows for rapid importing from an array such as $_POST
	 * while limiting which fields to import through an
	 *
	 * @param unknown_type $importArray
	 * @param unknown_type $fields
	 */
	public function import($importArray, $fieldNames = null) {
		if (!is_array($importArray)) {
			throw new Exception('BlankCanvas\\Model must take an array as its first argument');
		}
		if (is_string($fieldNames)) {
			$fieldNames = preg_split('/,/', $fieldNames);
		}
		foreach ($importArray as $k => $v) {
			if (!is_array($fieldNames) || (is_array($fieldNames) && in_array($k, $fieldNames))) {
				$this->$k = $v;
			}
		}
	}
	
	public function save() {
		self::_getMapper()->save($this);
	}
	
	public function __get($property) {
		if ($property == 'id') {
			return (int) parent::__get($property);
		}
		return parent::__get($property);
	}
	
}

class Mapper extends \phpDataMapper_Base {
	public function __construct($adapter = null, $adapterRead = null, $entityClassName = null, $tableName = null, $fields, $engine) {
		
		$this->_primaryKey = 'id';
		
		$this->_datasource = $tableName;
		$this->_entityClass = $entityClassName;
		
		if(!is_null($engine)) {
			$this->engine($engine);
		}
		
		$id = array(
			'id' => array(
				'type' => 'int',
				'primary' => true,
				'unsigned' => true,
				'serial' => true
			)
		);
		if(is_array($fields)) {
			$fields = array_merge($id, $fields);
		} else {
			$fields = $id;
		}
		$this->loadFields($fields);
		
		$adapter = is_null($adapter) ? self::$_globalAdapter : $adapter;
		parent::__construct($adapter, $adapterRead);
	}
	
}

?>